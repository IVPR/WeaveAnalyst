/**
 * contains all the functions required for project management 
 * @author spurushe
 */
(function(){
	
	angular.module('weaveAnalyst.project').service('projectService', projectService);
	projectService.$inject = ['$q', '$rootScope', 'WeaveService', 'runQueryService','queryService', 'projectManagementURL'];
	
	function projectService ($q, rootScope, WeaveService, runQueryService,queryService, projectManagementURL){
		var that = this;
		
		that.cache= {
				project: {selected : null},
				listOfProjectsFromDatabase : [],
				returnedQueryObjects : [],
				columnstring : null, 
				projectDescription : null, 
				userName : null, 
				weaveSessionState : null,
				deleteProjectStatus : null, 
				deleteQueryObjectStatus : null, 
				insertQueryObjectStatus : null,
				no_of_projects : 0
		};

		/**
		 *this function checks if the table 'stored_query_objects' has already been created
		 */
		that.checkQOTableExits = function(){
			var deferred = $q.defer();
			
			runQueryService.queryRequest(projectManagementURL, 'checkQOTableExits', null, function(result){
				deferred.resolve(result);
			});
			return deferred.promise;
		};
		
		/**
		 *this function creates the table 'stored_query_objects' if it has not been created before
		 */
		that.createQOTable = function(){
			var deferred = $q.defer();
				
			runQueryService.queryRequest(projectManagementURL, 'createQOTable', null, function(result){
				deferred.resolve(result);
			});
			return deferred.promise;
		};
		
		
		/**
	     * This function wraps the async aws getListOfProjects function into an angular defer/promise
	     * So that the UI asynchronously wait for the data to be available...
	     */
	   
	    that.getListOfProjects = function() {
	    	var deferred = $q.defer();
	    	runQueryService.queryRequest(projectManagementURL, 'getProjectListFromDatabase', null, function(result){
				that.cache.listOfProjectsFromDatabase = result;
				that.cache.no_of_projects = result.length;
				deferred.resolve(result);
			});
	    	
	    	return deferred.promise;
	    };
	    
	    /**
	     * This function wraps the async aws getQueryObjectsInProject function into an angular defer/promise
	     * So that the UI asynchronously wait for the data to be available...
	     */
	    that.getListOfQueryObjects = function(projectName) {
	    	var deferred = $q.defer();
	    	runQueryService.queryRequest(projectManagementURL, 'getListOfQueryObjects', [projectName], function(AWSQueryObjectCollection){
	    		that.cache.returnedQueryObjects = [];
	    		if(!(angular.isUndefined(AWSQueryObjectCollection)))
	    			{    			
	        			var countOfJsons = AWSQueryObjectCollection.length;
	        			for(var i = 0; i < countOfJsons; i++)
	        			{
	        				var singleObject= {};
	        				singleObject.queryObject = JSON.parse(AWSQueryObjectCollection[i].finalQueryObject);
	        				singleObject.queryObjectName = AWSQueryObjectCollection[i].queryObjectName;
	        				singleObject.projectDescription = AWSQueryObjectCollection[i].projectDescription;
	        				that.cache.projectDescription = AWSQueryObjectCollection[i].projectDescription;
	        				if(angular.isUndefined(AWSQueryObjectCollection[i].thumbnail)){
	        					singleObject.thumbnail = undefined;
	        					console.log("This queryObject does not contain any stored visualizations");
	        				}
	        				else{
	        					
	        					singleObject.thumbnail = "data:image/png;base64," + AWSQueryObjectCollection[i].thumbnail;
	        				}
	        				
	        				
	        				that.cache.columnstring = "";
	        				var columns = singleObject.queryObject.scriptOptions;
	        				for(var j in columns){
	        					var title = columns[j].metadata.title;
	        					that.cache.columnstring= that.cache.columnstring.concat(title) + " , ";
	        				}
	        				singleObject.columnstring = that.cache.columnstring.slice(0,-2);//getting rid of the last comma
	        				that.cache.returnedQueryObjects[i] = singleObject;
	        			}
	        			
	    			}else{
	    				that.cache.project.selected = "";
	    				that.cache.projectDescription = "";
	    				that.cache.userName = "";
	    			}
	    		
	                deferred.resolve(AWSQueryObjectCollection);
	                rootScope.$apply();
	        	
	        });
	    	
	    	return deferred.promise;
	    };
	    
	    /**
	     * returns the base64 encoded session state of the visualizations generated by a query object
	     */
	    that.getBase64SessionState = function(params){
	    	if(!(WeaveService.weaveWindow.closed)){
	    		var base64SessionState = WeaveService.getBase64SessionState();
	    		queryService.queryObject.weaveSessionState = WeaveService.getSessionStateObjects();//TODO fix this adding properties dynamically not GOOD
	    		that.writeSessionState(base64SessionState, params);
	    	}
	    };
	   
	    that.writeSessionState = function(base64String, params){
	    	var projectName;
	    	var userName;
	    	var queryObjectTitles;
	    	var projectDescription;
	    	
	    	if(angular.isDefined(params.projectEntered))
	    		{
		    		projectName = params.projectEntered;
		    		projectDescription = "This project belongs to " + projectName;
	    		}
	    	else
	    		{
		    		projectName = "Other";
		    		projectDescription = "These query objects do not belong to any project"; 
	    		}
	    	if(angular.isDefined(params.queryTitleEntered)){
	    		queryObjectTitles = params.queryTitleEntered;
	    		queryService.queryObject.title = queryObjectTitles;
	    	}
	    	else
	    		 queryObjectTitles = queryService.queryObject.title;
	    	if(angular.isDefined(params.userName)){
	    		userName = params.userName;
	    		queryService.queryObject.author = userName;
	    	}
	    	else
	    		userName = "Awesome User";
	    	

	    	var queryObjectJsons = angular.toJson(queryService.queryObject);
	    	var resultVisualizations = base64String;
	    	
	    	
	    	runQueryService.queryRequest(projectManagementURL, 'writeSessionState', [userName, projectDescription, queryObjectTitles, queryObjectJsons, resultVisualizations, projectName], function(result){
	    		console.log("adding status", result);
	    		alert(queryObjectTitles + " has been added");
	    	});
	    };
	    
	    
	    /**
	     * this function returns the session state corresponding to the thumbnail of a query object that was clicked
	     */
	    that.returnSessionState = function(queryObject){
	   	 var deferred = $q.defer();
	   	 queryObject = angular.toJson(queryObject);
	   	 //console.log("stringified queryObject", queryObject);
	   	 
	   	 runQueryService.queryRequest(projectManagementURL, 'getSessionState', [queryObject], function(result){
	   		 that.cache.weaveSessionState = result;
	   		 deferred.resolve(result);
	        	
	   	 });
	    		
			return deferred.promise;
	   };
	   
	   	//as soon as service returns deleteStatus
		//1. report status
		//2. reset required variables
		//3. updates required lists
	   /**
	    * This function wraps the async aws deleteproject function into an angular defer/promise
	    * So that the UI asynchronously wait for the data to be available...
	    */
	   that.deleteProject = function(projectName) {
	   	var deferred = $q.defer();
	   	runQueryService.queryRequest(projectManagementURL, 'deleteProjectFromDatabase', [projectName], function(result){
	           
	       	that.cache.deleteProjectStatus = result;//returns an integer telling us the number of row(s) deleted
	       	
	      	 if(! (that.cache.deleteProjectStatus == 0 )){
	      		 
	      		that.cache.returnedQueryObjects = [];//reset
	      		that.cache.projectDescription = "";
	      		 alert("The Project " + projectName + " has been deleted");
	      		 that.getListOfProjects();//call the updated projects list
	      	 }
	      	 
	      	 that.cache.deleteProjectStatus = 0;//reset 
	      	 deferred.resolve(result);
	       	
	       });
	       return deferred.promise;
	   };
	   
	   /**
	    * This function wraps the async aws deleteQueryObject function into an angular defer/promise
	    * So that the UI asynchronously wait for the data to be available...
	    */
	   that.deleteQueryObject = function(projectName, queryObjectTitle){
		   var deferred = $q.defer();
		   runQueryService.queryRequest(projectManagementURL, 'deleteQueryObjectFromProject', [projectName, queryObjectTitle], function(result){
		       	that.cache.deleteQueryObjectStatus = result;
		       	console.log("in the service",that.cache.deleteQueryObjectStatus );
		       	
		       	alert("Query Object " + queryObjectTitle + " has been deleted");
		       	
		       	that.cache.returnedQueryObjects = [];//clears list
		       	
		       	that.getListOfQueryObjects(projectName);//fetches new list
		       	
		       	//if the project contained only one QO which was deleted , retrive the new updated lists of projects
		       	if(that.cache.returnedQueryObjects.length == 0){
		       		that.getListOfProjects();
		       		that.cache.project.selected = "";
		       	}
		       	deferred.resolve(result);
		       	
		       });
		       
		       return deferred.promise;
	   };
	   
	   /**
	    * This function wraps the async aws insertQueryObjectToProject function into an angular defer/promise
	    * adds a query object (row) to the specified project in the database
	    * So that the UI asynchronously wait for the data to be available...
	    */
	   that.insertQueryObjectToProject = function(userName, projectName, projectDescription,queryObjectTitles,queryObjectJsons, resultVisualizations){
	 
	   	var deferred = $q.defer();

	   	runQueryService.queryRequest(projectManagementURL, 'insertMultipleQueryObjectInProjectFromDatabase', [userName,
	   	                                                                                          projectName,
	   	                                                                                          projectDescription,
	   	                                                                                          queryObjectTitles,
	   	                                                                                          queryObjectJsons,
	   	                                                                                          resultVisualizations], function(result){
	   		that.cache.insertQueryObjectStatus = result;//returns an integer telling us the number of row(s) added
	       	console.log("insertQueryObjectStatus", that.cache.insertQueryObjectStatus);
	       	if(that.cache.insertQueryObjectStatus != 0){
	       		alert(that.cache.insertQueryObjectStatus + " Query Object(s)" +  " have been added to project:" + projectName);
	       	}
	       	
	       	deferred.resolve(result);
	       	
	       });
	       return deferred.promise;
	       
	   };
	   
	   that.createNewProject = function(userNameEntered, projectNameEntered,projectDescriptionEntered, queryObjectTitles, queryObjectJsons){
		   that.insertQueryObjectToProject(userNameEntered,
				   						   projectNameEntered,
				   						   projectDescriptionEntered,
				   						   queryObjectTitles,
				   						   queryObjectJsons,
				   						   null)
		   .then(function(){
			   that.cache.listOfProjectsFromDatabase = [];//clear
			   that.getListOfProjects();//fetch new list
		   });

	   };

	};
})();

